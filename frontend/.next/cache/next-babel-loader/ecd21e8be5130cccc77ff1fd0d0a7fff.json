{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/moawad/workspace/e-commerce/frontend/src/components/datatable/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect } from 'react';\nimport { useTable, useSortBy, usePagination, useRowSelect } from 'react-table';\nimport { PageWithText } from '../pagination';\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi';\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    indeterminate\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"indeterminate\"]);\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({\n    type: \"checkbox\",\n    ref: resolvedRef\n  }, rest), {}, {\n    className: \"form-checkbox h-4 w-4\"\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 13\n  }, this);\n});\n\nconst Datatable = ({\n  columns,\n  data\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: 10\n    }\n  }, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, _objectSpread({}, getToggleAllRowsSelectedProps()), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this)\n      }, void 0, false),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, _objectSpread({}, row.getToggleRowSelectedProps()), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)\n    }, ...columns]);\n  });\n  useEffect(() => {\n    //callback goes here to get selected row ids\n    console.log(JSON.stringify(selectedRowIds, null, 2));\n    console.log(JSON.stringify(data.filter((item, index) => Object.keys(selectedRowIds).map(i => parseInt(i, 10)).includes(index)), null, 2));\n  }, [selectedRowIds]); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({}, getTableProps()), {}, {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps(column.getSortByToggleProps())), {}, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-row items-center justify-start\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.render('Header')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-auto\",\n                children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FiChevronDown, {\n                  className: \"stroke-current text-2xs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 31\n                }, this) : /*#__PURE__*/_jsxDEV(FiChevronUp, {\n                  className: \"stroke-current text-2xs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 31\n                }, this) : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this)\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                children: cell.render('Cell')\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 40\n              }, this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center justify-between my-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap items-center justify-start space-x-2 pagination\",\n        children: [pageIndex !== 0 && /*#__PURE__*/_jsxDEV(PageWithText, {\n          onClick: () => gotoPage(0),\n          children: \"First\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), canPreviousPage && /*#__PURE__*/_jsxDEV(PageWithText, {\n          onClick: () => previousPage(),\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), canNextPage && /*#__PURE__*/_jsxDEV(PageWithText, {\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), pageIndex !== pageCount - 1 && /*#__PURE__*/_jsxDEV(PageWithText, {\n          onClick: () => gotoPage(pageCount - 1),\n          disabled: !canNextPage,\n          children: \"Last\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 32\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select text-sm bg-white dark:bg-gray-800 dark:border-gray-800 outline-none shadow-none focus:shadow-none\",\n        value: pageSize,\n        onChange: e => {\n          setPageSize(Number(e.target.value));\n        },\n        children: [10, 25, 50, 100].map(pageSize => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pageSize,\n          children: [\"Show \", pageSize]\n        }, pageSize, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Datatable;","map":{"version":3,"sources":["/Users/moawad/workspace/e-commerce/frontend/src/components/datatable/index.tsx"],"names":["React","useEffect","useTable","useSortBy","usePagination","useRowSelect","PageWithText","FiChevronDown","FiChevronUp","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","Datatable","columns","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","selectedRowIds","initialState","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","console","log","JSON","stringify","filter","item","index","Object","keys","map","i","parseInt","includes","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","length","e","Number","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,aAA7B,EAA4CC,YAA5C,QAA+D,aAA/D;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,gBAAzC;AAEA,MAAMC,qBAAqB,gBAAGT,KAAK,CAACU,UAAN,CAC1B,OAA2BC,GAA3B,KAAmC;AAAA,MAAlC;AAACC,IAAAA;AAAD,GAAkC;AAAA,MAAfC,IAAe;;AAC/B,QAAMC,UAAU,GAAGd,KAAK,CAACe,MAAN,EAAnB;AACA,QAAMC,WAAW,GAAGL,GAAG,IAAIG,UAA3B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,WAAW,CAACC,OAAZ,CAAoBL,aAApB,GAAoCA,aAApC;AACH,GAFQ,EAEN,CAACI,WAAD,EAAcJ,aAAd,CAFM,CAAT;AAIA,sBACI;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,GAAG,EAAEI;AAFT,KAGQH,IAHR;AAII,IAAA,SAAS,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjByB,CAA9B;;AAoBA,MAAMK,SAAS,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAAqB;AACnC,QAAM;AACFC,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,UAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA,eANE;AAOFC,IAAAA,WAPE;AAQFC,IAAAA,WARE;AASFC,IAAAA,SATE;AAUFC,IAAAA,QAVE;AAWFC,IAAAA,QAXE;AAYFC,IAAAA,YAZE;AAaFC,IAAAA,WAbE;AAcFC,IAAAA,KAAK,EAAE;AAACC,MAAAA,SAAD;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB;AAdL,MAeFnC,QAAQ,CACR;AACIiB,IAAAA,OADJ;AAEIC,IAAAA,IAFJ;AAGIkB,IAAAA,YAAY,EAAE;AAACH,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,QAAQ,EAAE;AAAzB;AAHlB,GADQ,EAMRjC,SANQ,EAORC,aAPQ,EAQRC,YARQ,EASPkC,KAAD,IAAW;AACPA,IAAAA,KAAK,CAACC,cAAN,CAAqBC,IAArB,CAA2BtB,OAAD,IAAa,CACnC;AACA;AACIuB,MAAAA,EAAE,EAAE,WADR;AAEI;AACA;AACAC,MAAAA,MAAM,EAAE,CAAC;AAACC,QAAAA;AAAD,OAAD,kBACJ;AAAA,+BACI,QAAC,qBAAD,oBAA2BA,6BAA6B,EAAxD;AAAA;AAAA;AAAA;AAAA;AADJ,uBALR;AASI;AACA;AACAC,MAAAA,IAAI,EAAE,CAAC;AAACC,QAAAA;AAAD,OAAD,kBACF;AAAA,+BACI,QAAC,qBAAD,oBAA2BA,GAAG,CAACC,yBAAJ,EAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAZR,KAFmC,EAmBnC,GAAG5B,OAnBgC,CAAvC;AAqBH,GA/BO,CAfZ;AAiDAlB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA+C,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAed,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAAZ;AACAW,IAAAA,OAAO,CAACC,GAAR,CACIC,IAAI,CAACC,SAAL,CACI/B,IAAI,CAACgC,MAAL,CAAY,CAACC,IAAD,EAAOC,KAAP,KACRC,MAAM,CAACC,IAAP,CAAYnB,cAAZ,EACKoB,GADL,CACUC,CAAD,IAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CADxB,EAEKE,QAFL,CAEcN,KAFd,CADJ,CADJ,EAMI,IANJ,EAOI,CAPJ,CADJ;AAWH,GAdQ,EAcN,CAACjB,cAAD,CAdM,CAAT,CAlDmC,CAkEnC;;AACA,sBACI;AAAA,4BACI,iDAAWhB,aAAa,EAAxB;AAA4B,MAAA,SAAS,EAAC,OAAtC;AAAA,8BACI;AAAA,kBACCE,YAAY,CAACkC,GAAb,CAAkBI,WAAD,iBACd,8CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,oBACKD,WAAW,CAACE,OAAZ,CAAoBN,GAApB,CAAyBO,MAAD,iBACrB,8CAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,0CAAf;AAAA,sCACI;AAAA,0BAAOF,MAAM,CAACG,MAAP,CAAc,QAAd;AAAP;AAAA;AAAA;AAAA;AAAA,sBADJ,eAGI;AAAM,gBAAA,SAAS,EAAC,SAAhB;AAAA,0BACbH,MAAM,CAACI,QAAP,GACGJ,MAAM,CAACK,YAAP,gBACI,QAAC,aAAD;AAAe,kBAAA,SAAS,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,wBADJ,gBAGI,QAAC,WAAD;AAAa,kBAAA,SAAS,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,wBAJP,GAOG;AARU;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBADH;AADD;AAAA;AAAA;AAAA;AAAA,cADJ,eA0BI,iDAAW/C,iBAAiB,EAA5B;AAAA,kBACCG,IAAI,CAACgC,GAAL,CAAS,CAACX,GAAD,EAAMY,CAAN,KAAY;AAClBlC,UAAAA,UAAU,CAACsB,GAAD,CAAV;AACA,8BACI,8CAAQA,GAAG,CAACwB,WAAJ,EAAR;AAAA,sBACKxB,GAAG,CAACyB,KAAJ,CAAUd,GAAV,CAAee,IAAD,IAAU;AACrB,kCAAO,8CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,aAFA;AADL;AAAA;AAAA;AAAA;AAAA,kBADJ;AAOH,SATA;AADD;AAAA;AAAA;AAAA;AAAA,cA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAyCI;AAAK,MAAA,SAAS,EAAC,iDAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA,mBACKhC,SAAS,KAAK,CAAd,iBACG,QAAC,YAAD;AAAc,UAAA,OAAO,EAAE,MAAML,QAAQ,CAAC,CAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR,EAIKJ,eAAe,iBACZ,QAAC,YAAD;AAAc,UAAA,OAAO,EAAE,MAAMM,YAAY,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALR,EAOKL,WAAW,iBACR,QAAC,YAAD;AAAc,UAAA,OAAO,EAAE,MAAMI,QAAQ,EAArC;AAAyC,UAAA,QAAQ,EAAE,CAACJ,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARR,EAYKQ,SAAS,KAAKN,SAAS,GAAG,CAA1B,iBACG,QAAC,YAAD;AACI,UAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,SAAS,GAAG,CAAb,CAD3B;AAEI,UAAA,QAAQ,EAAE,CAACF,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAsBI;AAAA,2BAAW,GAAX,eAAe;AAAA,qBAAIQ,SAAS,GAAG,CAAhB,UAAuBP,WAAW,CAAC8C,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAf,EAA8D,GAA9D;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAuBI;AACI,QAAA,SAAS,EAAC,+GADd;AAEI,QAAA,KAAK,EAAEtC,QAFX;AAGI,QAAA,QAAQ,EAAGuC,CAAD,IAAO;AACb1C,UAAAA,WAAW,CAAC2C,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP,CAAX;AACH,SALL;AAAA,kBAMK,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb,EAAkBrB,GAAlB,CAAuBrB,QAAD,iBACnB;AAAuB,UAAA,KAAK,EAAEA,QAA9B;AAAA,8BACUA,QADV;AAAA,WAAaA,QAAb;AAAA;AAAA;AAAA;AAAA,gBADH;AANL;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAzCJ;AAAA,kBADJ;AAgFH,CAnJD;;AAqJA,eAAelB,SAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport {useTable, useSortBy, usePagination, useRowSelect} from 'react-table'\nimport {PageWithText} from '../pagination'\nimport {FiChevronDown, FiChevronUp} from 'react-icons/fi'\n\nconst IndeterminateCheckbox = React.forwardRef(\n    ({indeterminate, ...rest}, ref) => {\n        const defaultRef = React.useRef()\n        const resolvedRef = ref || defaultRef\n\n        useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate\n        }, [resolvedRef, indeterminate])\n\n        return (\n            <input\n                type=\"checkbox\"\n                ref={resolvedRef}\n                {...rest}\n                className=\"form-checkbox h-4 w-4\"\n            />\n        )\n    }\n)\n\nconst Datatable = ({columns, data}) => {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: {pageIndex, pageSize, selectedRowIds}\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {pageIndex: 0, pageSize: 10}\n        },\n        useSortBy,\n        usePagination,\n        useRowSelect,\n        (hooks) => {\n            hooks.visibleColumns.push((columns) => [\n                // Let's make a column for selection\n                {\n                    id: 'selection',\n                    // The header can use the table's getToggleAllRowsSelectedProps method\n                    // to render a checkbox\n                    Header: ({getToggleAllRowsSelectedProps}) => (\n                        <>\n                            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n                        </>\n                    ),\n                    // The cell can use the individual row's getToggleRowSelectedProps method\n                    // to the render a checkbox\n                    Cell: ({row}) => (\n                        <>\n                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                        </>\n                    )\n                },\n                ...columns\n            ])\n        }\n    )\n\n    useEffect(() => {\n        //callback goes here to get selected row ids\n        console.log(JSON.stringify(selectedRowIds, null, 2))\n        console.log(\n            JSON.stringify(\n                data.filter((item, index) =>\n                    Object.keys(selectedRowIds)\n                        .map((i) => parseInt(i, 10))\n                        .includes(index)\n                ),\n                null,\n                2\n            )\n        )\n    }, [selectedRowIds])\n\n    // Render the UI for your table\n    return (\n        <>\n            <table {...getTableProps()} className=\"table\">\n                <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                <div className=\"flex flex-row items-center justify-start\">\n                                    <span>{column.render('Header')}</span>\n                                    {/* Add a sort direction indicator */}\n                                    <span className=\"ml-auto\">\n                      {column.isSorted ? (\n                          column.isSortedDesc ? (\n                              <FiChevronDown className=\"stroke-current text-2xs\"/>\n                          ) : (\n                              <FiChevronUp className=\"stroke-current text-2xs\"/>\n                          )\n                      ) : (\n                          ''\n                      )}\n                    </span>\n                                </div>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map((cell) => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n\n            <div className=\"flex flex-row items-center justify-between my-4\">\n                <div className=\"flex flex-wrap items-center justify-start space-x-2 pagination\">\n                    {pageIndex !== 0 && (\n                        <PageWithText onClick={() => gotoPage(0)}>First</PageWithText>\n                    )}\n                    {canPreviousPage && (\n                        <PageWithText onClick={() => previousPage()}>Previous</PageWithText>\n                    )}\n                    {canNextPage && (\n                        <PageWithText onClick={() => nextPage()} disabled={!canNextPage}>\n                            Next\n                        </PageWithText>\n                    )}\n                    {pageIndex !== pageCount - 1 && (\n                        <PageWithText\n                            onClick={() => gotoPage(pageCount - 1)}\n                            disabled={!canNextPage}>\n                            Last\n                        </PageWithText>\n                    )}\n                </div>\n\n                <span>Page{' '}<b>{pageIndex + 1} of {pageOptions.length}</b>{' '}</span>\n                <select\n                    className=\"form-select text-sm bg-white dark:bg-gray-800 dark:border-gray-800 outline-none shadow-none focus:shadow-none\"\n                    value={pageSize}\n                    onChange={(e) => {\n                        setPageSize(Number(e.target.value))\n                    }}>\n                    {[10, 25, 50, 100].map((pageSize) => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </>\n    )\n}\n\nexport default Datatable\n"]},"metadata":{},"sourceType":"module"}